{"version":3,"sources":["crypto (ignored)","./src/app/auth/register/register.component.ts","./src/app/auth/register/register.component.html","./src/app/auth/login/login.component.ts","./src/app/auth/login/login.component.html"],"names":[],"mappings":"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","file":"default~auth-auth-module~dashboard-dashboard-module.js","sourcesContent":["/* (ignored) */","import { validateHorizontalPosition } from '@angular/cdk/overlay';\nimport { Component, OnInit } from '@angular/core';\nimport { Form, FormBuilder, FormControl, FormControlName, FormGroup, Validators } from '@angular/forms';\n\n@Component({\n  selector: 'app-register',\n  templateUrl: './register.component.html',\n  styleUrls: ['./register.component.scss']\n})\nexport class RegisterComponent implements OnInit {\n  registerForm:FormGroup;\n\n\n  constructor(private form:FormBuilder) { \nthis.registerForm=this.createFormRegister()\n  }\n\n  ngOnInit(): void {\n  }\n\n  createFormRegister(): FormGroup{\nreturn this.form.group({\n  firstName: new FormControl('', Validators.required),\n  lastName:new FormControl('',Validators.required),\n  email:new FormControl('',Validators.required),\n  password:new FormControl('',[Validators.required,Validators.min(5)]),\n  address:new FormControl(''),\n  city:new FormControl(''),\n  country:new FormControl(''),\n  zipcode:new FormControl('')\n})\n  }\n\n\n\n  register():void{\n\n  }\n\n}\n","<mat-card class=\"register-card\" mat-dialog>\n  <mat-card-header>\n    <mat-card-title mat-dilog-title><h1>Register</h1></mat-card-title>\n    <mat-card-subtitle>procide your registration</mat-card-subtitle>\n  </mat-card-header>\n  <mat-card-content mat-dialog-content>\n    <form [formGroup]=\"registerForm\" (ngSubmit)=\"register()\">\n      <mat-form-field class=\"input-form\">\n        <mat-label>First Name</mat-label>\n        <input type=\"text\" matInput formControlName=\"firstName\" placeholder=\"Enter your name\">\n      </mat-form-field>\n      <mat-form-field class=\"input-form\">\n        <mat-label>Last Name</mat-label>\n        <input type=\"lastName\" matInput formControlName=\"lastName\" placeholder=\"Enter your last name\">\n      </mat-form-field>\n      <mat-form-field class=\"input-form\">\n        <mat-label>Email</mat-label>\n        <input type=\"email\" matInput formControlName=\"email\" placeholder=\"Ex. pat@example.com\">\n      </mat-form-field>\n      <mat-form-field class=\"input-form\">\n        <mat-label>password</mat-label>\n        <input type=\"password\" matInput formControlName=\"password\">\n      </mat-form-field>\n      <mat-form-field class=\"input-form\">\n        <mat-label>Address</mat-label>\n        <input type=\"text\" matInput formControlName=\"address\" placeholder=\"\">\n      </mat-form-field>\n      <mat-form-field class=\"input-form\">\n        <mat-label>city</mat-label>\n        <input type=\"text\" matInput formControlName=\"city\">\n      </mat-form-field>\n      <mat-form-field class=\"input-form\">\n        <mat-label>country</mat-label>\n        <input type=\"text\" matInput formControlName=\"country\">\n      </mat-form-field>\n      <mat-form-field class=\"input-form\">\n        <mat-label>ZIP code</mat-label>\n        <input type=\"text\" matInput formControlName=\"zipcode\">\n      </mat-form-field>\n    </form>\n  </mat-card-content>\n  <mat-card-actions >\n    <button type=\"submit\"mat-raised-button color=\"primary\">Register</button>\n  </mat-card-actions>\n  <mat-card-actions>\n    Have you an account? <a class=\"text-link\" routerLink=\"/auth/login\">signin</a>\n  </mat-card-actions>\n</mat-card>","import { Component, OnInit } from '@angular/core';\nimport {FormBuilder, FormControl, FormGroupDirective, NgForm, Validators} from '@angular/forms';\nimport {ErrorStateMatcher} from '@angular/material/core';\nimport * as crypto from 'crypto';\n\nexport class MyErrorStateMatcher implements ErrorStateMatcher {\n  isErrorState(control: FormControl | null, form: FormGroupDirective | NgForm | null): boolean {\n    const isSubmitted = form && form.submitted;\n    return !!(control && control.invalid && (control.dirty || control.touched || isSubmitted));\n  }\n}\n@Component({\n  selector: 'app-login',\n  templateUrl: './login.component.html',\n  styleUrls: ['./login.component.scss']\n})\nexport class LoginComponent implements OnInit {\n  \n  loginForm=this.form.group({\n    email : new FormControl('', [\n      Validators.required,\n      Validators.email,\n    ]),\n    password : new FormControl('', [\n      Validators.required,\n      Validators.min(5),\n    ]),\n  });\n matcher = new MyErrorStateMatcher();\n  constructor(private form:FormBuilder) {    \n  }\n  ngOnInit(): void {\n  }\nlogin():void{\nconsole.log(this.loginForm.value.password)\nlet text=this.loginForm.value.password\n// Difining algorithm \nconst algorithm = 'aes-256-cbc'; \n  \n// Defining key \nconst key = \"12345678123456781234567812345678\"; \n// Defining iv \nconst iv = \"1234567812345678\";   \n// An encrypt function   \n // Creating Cipheriv with its parameter \n let cipher = crypto.createCipheriv( \n      'aes-256-cbc', Buffer.from(key), iv);  \n // Updating text \n let encrypted = cipher.update(text);  \n // Using concatenation \n encrypted = Buffer.concat([encrypted, cipher.final()]);  \n // Returning iv and encrypted data \n  console.log(iv);  \n  console.log(encrypted.toString('hex') ) ;\n}\n}\n","<mat-card class=\"example-card\" mat-dialog>\n<mat-card-header class=\"card-title\">\n  <mat-card-title mat-dialog-title><h1>Login</h1></mat-card-title>\n<mat-card-subtitle>Hello! Log in with your email.</mat-card-subtitle>\n</mat-card-header>\n<mat-card-content mat-dialog-content>\n\n<form [formGroup]=\"loginForm\" (ngSubmit)=\"login()\"  >\n  <mat-form-field class=\"example-full-width\">\n    <mat-label>Email</mat-label>\n    <input type=\"email\" matInput  formControlName=\"email\" \n           placeholder=\"Ex. pat@example.com\">\n\n  </mat-form-field>\n  <mat-form-field class=\"example-full-width\">\n    <mat-label>password</mat-label>\n    <input type=\"password\" matInput formControlName=\"password\" \n           placeholder=\"enter your password\">\n   \n  </mat-form-field>\n  <mat-card-actions >\n\n    <button mat-raised-button color=\"primary\" type=\"submit\">\n      Log In\n    </button>\n  </mat-card-actions>\n</form>\n</mat-card-content>\n\n\n<mat-card-actions>\n  Don't have an account? <a class=\"text-link\" routerLink=\"/auth/signout\">Register</a>\n</mat-card-actions>\n\n\n</mat-card>\n"],"sourceRoot":"webpack:///"}